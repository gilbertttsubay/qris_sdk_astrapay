// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name qris_sdk_astrapay
import AVFoundation
import AVKit
import Alamofire
import Foundation
import Lottie
import Photos
import SkeletonView
import Swift
import UIKit
import WebKit
import _Concurrency
@_exported import qris_sdk_astrapay
public struct QRBalance : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct QRResponse<T> {
}
public enum BuildMode {
  case sit
  case uat
  case prod
  public static func == (a: qris_sdk_astrapay.BuildMode, b: qris_sdk_astrapay.BuildMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ClientProtocol {
  func getAuthToken() -> Swift.String
  func getBuildMode() -> qris_sdk_astrapay.BuildMode
}
public struct QRClient {
  public mutating func determineBuildMode()
}
public enum PaymentMethod {
  case BALANCE
  case PAYLATER
  case POINT
  public static func == (a: qris_sdk_astrapay.PaymentMethod, b: qris_sdk_astrapay.PaymentMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum QrFeature {
  case MPM
  case CPM
  public static func == (a: qris_sdk_astrapay.QrFeature, b: qris_sdk_astrapay.QrFeature) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TipType {
  case ANY
  case FIXED
  case PERCENTAGE
  case NONE
  public static func == (a: qris_sdk_astrapay.TipType, b: qris_sdk_astrapay.TipType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct QRInquiryResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct QRPaylaterClient {
  public func constructHeaderGeneral() -> Alamofire.HTTPHeaders
  public mutating func determineBuildMode()
}
public struct QRTransactionClient {
  public func constructHeaderGeneral() -> Alamofire.HTTPHeaders
  public func getTransactionBalance(completion: @escaping (qris_sdk_astrapay.QRResponse<qris_sdk_astrapay.QRBalance>) -> Swift.Void) -> Alamofire.DataRequest
}
public struct QRNewRouterSdk {
  public init(viewController: UIKit.UIViewController)
  public func navigateToQrScan()
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func setTapGestureRecognizer(action: (() -> Swift.Void)?)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func addTapGestureRecognizerQR(action: (() -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func roundCorners(_ corners: UIKit.UIRectCorner = .allCorners, value: CoreGraphics.CGFloat)
}
public struct QRInquiryDtoViewData : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public enum QRResultStatusResp<Value> {
  case success(Value)
  case failure(Swift.String)
  case serverBussy
}
public enum QRResultResponse<Value> {
  case message(Swift.String)
  case status(Swift.Int)
  case error(Swift.Error)
  case data(Value)
}
